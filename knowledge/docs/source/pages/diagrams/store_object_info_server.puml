
@startuml
' ====================> Start
skinparam participant{
BackGroundColor white
}
skinparam collections{
BackGroundColor white
}
skinparam control{
BackGroundColor white
}
<style>

' scope to sequenceDiagram elements
sequenceDiagram {
' define a new style, using CSS class syntax

.number1 {
BackgroundColor #GolenRod
RoundCorner 20
}

skinparam control{
BackGroundColor white
}

}

</style>
' -------------------- Notes

' -------------------- Diagram
box Topics #lightgrey
participant tf <<number1>>
participant visualization_marker_array <<number1>>
endbox
control store_object_info_server_node
'participant rosprolog_node <<number1>>

'control store_object_info_server
participant object_state.pl
collections knowrob
control rosprolog_node

' -------------------- Connections
store_object_info_server_node [#blue]-> object_state.pl ++ : **create_object()**
object_state.pl --> knowrob ++ : **create Shape, ShapeRegion, Origin**
knowrob -> knowrob : **tell(has_type(Shape, soma:'Shape'**
knowrob -> knowrob : **tell(has_type(ShapeRegion, soma:'ShapeRegion'**
knowrob -> knowrob : **tell(is_individual(Origin)**

knowrob --> rosprolog_node ++ : **publish to tf**
rosprolog_node [#blue]-> tf ++ : ** msg:Object**
knowrob <-- rosprolog_node --
tf --
object_state.pl <-- knowrob --

object_state.pl --> knowrob ++ : **republish**
rosprolog_node --
knowrob --> rosprolog_node ++ : **publish to visualization_marker_array**
rosprolog_node [#blue]-> visualization_marker_array ++ : **msg:marker_msgs**
knowrob <-- rosprolog_node --
visualization_marker_array --
object_state.pl <-- knowrob --
store_object_info_server_node <-[#blue] object_state.pl -- : query_string <-

' ====================> End
@enduml